name: oneplus_13_kernel_build

on:
  workflow_dispatch:
    inputs:
      KERNEL_SUFFIX:
        description: '内核名称修改(可改中文和emoji)'
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444-4k'
      KERNEL_TIME:
        description: "内核构建日期更改(默认为原厂)"
        required: true
        default: 'Tue Dec 17 23:36:49 UTC 2024'
      enable_feature_z:
        description: "是否添加风驰驱动"
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
      
      - name: Configure Git
        run: |
          git config --global user.name "Futaba"
          git config --global user.email "3199167602@qq.com"
      
      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl ccache libelf-dev build-essential flex bison libssl-dev
          python3 -m pip install -U pip
      
      - name: Clear and restore ccache
        run: |
          ccache -C
          ccache --zero-stats
        continue-on-error: true
      
      - name: Restore ccache
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-
      
      - name: Install repo tool
        run: |
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
      
      - name: Initialize kernel source
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/HanKuCha/kernel_manifest.git \
            -b refs/heads/oneplus/sm8750 \
            -m JiuGeFaCai_oneplus_13_v.xml \
            --depth=1
          repo sync -c -j$(nproc --all) --no-tags --force-sync
      
      - name: Clean protected exports
        run: |
          cd kernel_workspace
          rm -f kernel_platform/common/android/abi_gki_protected_exports_*
          rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_*
      
      - name: Set up KernelSU
        run: |
          cd kernel_workspace/kernel_platform
          # 使用 KernelSU 官方脚本集成到内核源码
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
      
      - name: Prepare SUSFS integration
        run: |
          cd kernel_workspace/kernel_platform
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6 ../susfs4ksu
      
      - name: Apply SUSFS patches
        run: |
          cd kernel_workspace/kernel_platform/common
    
          # 创建必要的目录结构
          mkdir -p fs/susfs include/linux
    
          # 复制SUSFS核心文件
          cp -v ../../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -v ../../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
    
          # 应用主补丁（使用--force强制应用，即使有失败）
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch .
          patch -p1 --verbose --force < 50_add_susfs_in_gki-android15-6.6.patch
    
          # 检查是否有补丁失败
          if [ -n "$(find . -name '*.rej')" ]; then
          echo "::warning:: Some patches failed to apply. Check the .rej files."
          find . -name '*.rej' -exec cat {} \;
          fi
    
          # 验证必须的文件是否存在
          [ -f "fs/susfs/main.c" ] || { echo "SUSFS main.c missing!"; exit 1; }
          [ -f "include/linux/susfs.h" ] || { echo "SUSFS header missing!"; exit 1; }
      
      - name: Configure kernel with SUSFS
        run: |
          cd kernel_workspace/kernel_platform/common
          
          # 禁用内核保护机制
          echo "DISABLE_MRPROPER=y" >> build.config.gki
          echo "DISABLE_DEFCONFIG_CHECK=y" >> build.config.gki
          
          # 添加SUSFS配置
          configs=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
          )
          
          for config in "${configs[@]}"; do
            grep -qxF "$config" arch/arm64/configs/gki_defconfig || echo "$config" >> arch/arm64/configs/gki_defconfig
          done
          
          # 设置内核后缀
          sed -i "s/-4k/${{ github.event.inputs.KERNEL_SUFFIX }}/g" arch/arm64/configs/gki_defconfig
          
          # 提交配置变更
          git add -A
          git commit -m "Add SUSFS configuration" || true
      
      - name: Apply HMBird GKI patch
        run: |
          cd kernel_workspace/kernel_platform/common/drivers
          cat << 'EOF' > hmbird_patch.c
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/of.h>
          #include <linux/slab.h>
          #include <linux/string.h>
          static int __init hmbird_patch_init(void)
          {
              struct device_node *ver_np;
              const char *type;
              int ret;
              ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
              if (!ver_np) { pr_info("hmbird_patch: version_type node not found\n"); return 0; }
              ret = of_property_read_string(ver_np, "type", &type);
              if (ret) { pr_info("hmbird_patch: type property not found\n"); of_node_put(ver_np); return 0; }
              if (strcmp(type, "HMBIRD_OGKI")) { of_node_put(ver_np); return 0; }
              struct property *prop = of_find_property(ver_np, "type", NULL);
              if (prop) {
                   struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                   if (!new_prop) { pr_info("hmbird_patch: kmalloc failed\n"); of_node_put(ver_np); return 0; }
                   memcpy(new_prop, prop, sizeof(*prop));
                   new_prop->value = kmalloc(strlen("HMBIRD_GKI")+1, GFP_KERNEL);
                   if (!new_prop->value) { pr_info("value alloc failed\n"); kfree(new_prop); of_node_put(ver_np); return 0; }
                   strcpy(new_prop->value, "HMBIRD_GKI"); new_prop->length=strlen("HMBIRD_GKI")+1;
                   of_remove_property(ver_np, prop); of_add_property(ver_np,new_prop); pr_info("patched\n");
              }
              of_node_put(ver_np); return 0;
          }
          early_initcall(hmbird_patch_init);
          MODULE_LICENSE("GPL"); MODULE_AUTHOR("reigadegr"); MODULE_DESCRIPTION("HMBIRD patch");
          EOF
          
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          
          cd ../../../
          git add -A
          git commit -m "Add HMBird GKI patch" || true
      
      - name: Add sched_ext (optional)
        if: ${{ inputs.enable_feature_z }}
        run: |
          cd kernel_workspace/kernel_platform
          git clone --depth=1 https://github.com/HanKuCha/sched_ext.git
          cp -r sched_ext/* common/kernel/sched
          rm -rf sched_ext
      
      - name: Build kernel
        run: |
          export KBUILD_BUILD_TIMESTAMP="${{ github.event.inputs.KERNEL_TIME }}"
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          
          cd kernel_workspace/kernel_platform/common
          
          # 配置内核
          make O=out ARCH=arm64 LLVM=1 gki_defconfig
          
          # 构建内核
          make -j$(nproc --all) \
            O=out \
            ARCH=arm64 \
            LLVM=1 \
            CC="ccache clang" \
            CROSS_COMPILE=aarch64-linux-gnu- \
            RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=ld.lld \
            HOSTLD=ld.lld \
            KCFLAGS="-O2 -Wno-error"
          
          # 验证SUSFS集成
          nm out/vmlinux | grep -i "susfs" || { echo "SUSFS symbols not found!"; exit 1; }
      
      - name: Package AnyKernel3
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1
          rm -rf AnyKernel3/.git AnyKernel3/push.sh
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image AnyKernel3/
          
          # 添加版本信息
          echo "kernel.string=KernelSU with SUSFS ${{ github.run_id }}" >> AnyKernel3/anykernel.sh
          echo "build.date=$(date +'%Y-%m-%d %H:%M')" >> AnyKernel3/anykernel.sh
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_SUSFS_${{ github.run_number }}_oneplus13
          path: |
            AnyKernel3/*
            kernel_workspace/kernel_platform/common/out/.config
